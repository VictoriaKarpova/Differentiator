// -------------------------------------------------------------
// 
// File Name: hdlsrc\Differentiator\Filter_test_24.v
// Created: 2020-12-04 11:28:54
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 2e-05
// Target subsystem base rate: 2e-05
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        2e-05
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Output1                       ce_out        2e-05
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Filter_test_24
// Source Path: Differentiator/Filter_test_24
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Filter_test_24
          (clk,
           reset,
           clk_enable,
           Input1,
//           ce_out,
           Output1);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [15:0] Input1;  // sfix16_En8
//  output  ce_out;
  output  signed [15:0] Output1;  // sfix16_En8

//  wire enb;
  reg signed [15:0] Input1_reg;
  wire [10:0] b23_1_out1;  // ufix11_En11
  reg signed [15:0] BodyDelay1_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay2_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay3_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay4_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay5_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay6_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay7_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay8_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay9_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay10_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay11_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay12_reg [0:1];  // sfix16 [2]
  wire signed [15:0] BodyDelay12_reg_next [0:1];  // sfix16_En8 [2]
  wire signed [15:0] BodyDelay12_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay13_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay14_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay15_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay16_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay17_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay18_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay19_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay20_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay21_out1;  // sfix16_En8
  reg signed [15:0] BodyDelay22_out1;  // sfix16_En8
  wire signed [19:0] b22_1_out1;  // sfix20_En19
  wire [18:0] b21_1_out1;  // ufix19_En19
  wire signed [18:0] b20_1_out1;  // sfix19_En18
  wire [17:0] b19_1_out1;  // ufix18_En18
  wire signed [18:0] b18_1_out1;  // sfix19_En18
  wire signed [20:0] b17_1_out1;  // sfix21_En20
  wire [19:0] b16_1_out1;  // ufix20_En20
  wire signed [19:0] b15_1_out1;  // sfix20_En19
  wire [18:0] b14_1_out1;  // ufix19_En19
  wire signed [18:0] b13_1_out1;  // sfix19_En18
  wire [17:0] b12_1_out1;  // ufix18_En18
  wire signed [19:0] b11_1_out1;  // sfix20_En19
  wire [18:0] b10_1_out1;  // ufix19_En19
  wire signed [21:0] b9_1_out1;  // sfix22_En21
  wire [20:0] b8_1_out1;  // ufix21_En21
  wire [17:0] b7_1_out1;  // ufix18_En18
  wire signed [20:0] b6_1_out1;  // sfix21_En20
  wire [19:0] b5_1_out1;  // ufix20_En20
  wire signed [21:0] b4_1_out1;  // sfix22_En21
  wire [19:0] b3_1_out1;  // ufix20_En20
  wire signed [23:0] b2_1_out1;  // sfix24_En23
  wire signed [39:0] Product2_mul_temp;  // sfix40_En31
  wire signed [17:0] Product2_out1;  // sfix18_En17
  wire [21:0] b1_1_out1;  // ufix22_En22
  wire signed [15:0] b24_1_out1;  // sfix16_En15
  wire signed [11:0] Product23_cast;  // sfix12_En11
  wire signed [27:0] Product23_mul_temp;  // sfix28_En19
  wire signed [26:0] Product23_cast_1;  // sfix27_En19
  wire signed [17:0] Product23_out1;  // sfix18_En17
  wire signed [35:0] Product22_mul_temp;  // sfix36_En27
  wire signed [15:0] Product22_out1;  // sfix16_En15
  wire signed [19:0] Product21_cast;  // sfix20_En19
  wire signed [35:0] Product21_mul_temp;  // sfix36_En27
  wire signed [34:0] Product21_cast_1;  // sfix35_En27
  wire signed [20:0] Product21_out1;  // sfix21_En19
  wire signed [34:0] Product20_mul_temp;  // sfix35_En26
  wire signed [18:0] Product20_out1;  // sfix19_En17
  wire signed [18:0] Product19_cast;  // sfix19_En18
  wire signed [34:0] Product19_mul_temp;  // sfix35_En26
  wire signed [33:0] Product19_cast_1;  // sfix34_En26
  wire signed [19:0] Product19_out1;  // sfix20_En18
  wire signed [34:0] Product18_mul_temp;  // sfix35_En26
  wire signed [19:0] Product18_out1;  // sfix20_En19
  wire signed [36:0] Product17_mul_temp;  // sfix37_En28
  wire signed [18:0] Product17_out1;  // sfix19_En18
  wire signed [20:0] Product16_cast;  // sfix21_En20
  wire signed [36:0] Product16_mul_temp;  // sfix37_En28
  wire signed [35:0] Product16_cast_1;  // sfix36_En28
  wire signed [20:0] Product16_out1;  // sfix21_En18
  wire signed [35:0] Product15_mul_temp;  // sfix36_En27
  wire signed [20:0] Product15_out1;  // sfix21_En17
  wire signed [19:0] Product14_cast;  // sfix20_En19
  wire signed [35:0] Product14_mul_temp;  // sfix36_En27
  wire signed [34:0] Product14_cast_1;  // sfix35_En27
  wire signed [21:0] Product14_out1;  // sfix22_En17
  wire signed [34:0] Product13_mul_temp;  // sfix35_En26
  wire signed [22:0] Product13_out1;  // sfix23_En17
  wire signed [18:0] Product12_cast;  // sfix19_En18
  wire signed [34:0] Product12_mul_temp;  // sfix35_En26
  wire signed [33:0] Product12_cast_1;  // sfix34_En26
  wire signed [22:0] Product12_out1;  // sfix23_En17
  wire signed [35:0] Product11_mul_temp;  // sfix36_En27
  wire signed [20:0] Product11_out1;  // sfix21_En16
  wire signed [19:0] Product10_cast;  // sfix20_En19
  wire signed [35:0] Product10_mul_temp;  // sfix36_En27
  wire signed [34:0] Product10_cast_1;  // sfix35_En27
  wire signed [20:0] Product10_out1;  // sfix21_En17
  wire signed [37:0] Product9_mul_temp;  // sfix38_En29
  wire signed [19:0] Product9_out1;  // sfix20_En17
  wire signed [21:0] Product8_cast;  // sfix22_En21
  wire signed [37:0] Product8_mul_temp;  // sfix38_En29
  wire signed [36:0] Product8_cast_1;  // sfix37_En29
  wire signed [17:0] Product8_out1;  // sfix18_En17
  wire signed [18:0] Product7_cast;  // sfix19_En18
  wire signed [34:0] Product7_mul_temp;  // sfix35_En26
  wire signed [33:0] Product7_cast_1;  // sfix34_En26
  wire signed [17:0] Product7_out1;  // sfix18_En17
  wire signed [36:0] Product6_mul_temp;  // sfix37_En28
  wire signed [18:0] Product6_out1;  // sfix19_En17
  wire signed [20:0] Product5_cast;  // sfix21_En20
  wire signed [36:0] Product5_mul_temp;  // sfix37_En28
  wire signed [35:0] Product5_cast_1;  // sfix36_En28
  wire signed [18:0] Product5_out1;  // sfix19_En17
  wire signed [37:0] Product4_mul_temp;  // sfix38_En29
  wire signed [19:0] Product4_out1;  // sfix20_En18
  wire signed [20:0] Product3_cast;  // sfix21_En20
  wire signed [36:0] Product3_mul_temp;  // sfix37_En28
  wire signed [35:0] Product3_cast_1;  // sfix36_En28
  wire signed [17:0] Product3_out1;  // sfix18_En17
  wire signed [22:0] Product1_cast;  // sfix23_En22
  wire signed [38:0] Product1_mul_temp;  // sfix39_En30
  wire signed [37:0] Product1_cast_1;  // sfix38_En30
  wire signed [17:0] Product1_out1;  // sfix18_En17
  wire signed [16:0] BodyLSum1_add_cast;  // sfix17_En16
  wire signed [17:0] BodyLSum1_add_cast_1;  // sfix18_En16
  wire signed [16:0] BodyLSum1_add_cast_2;  // sfix17_En16
  wire signed [17:0] BodyLSum1_add_cast_3;  // sfix18_En16
  wire signed [17:0] BodyLSum1_add_temp;  // sfix18_En16
  wire signed [16:0] BodyLSum1_out1;  // sfix17_En16
  wire signed [17:0] BodyLSum2_add_cast;  // sfix18_En16
  wire signed [17:0] BodyLSum2_add_cast_1;  // sfix18_En16
  wire signed [17:0] BodyLSum2_out1;  // sfix18_En16
  wire signed [18:0] BodyLSum3_add_cast;  // sfix19_En16
  wire signed [18:0] BodyLSum3_add_cast_1;  // sfix19_En16
  wire signed [18:0] BodyLSum3_out1;  // sfix19_En16
  wire signed [18:0] BodyLSum4_add_cast;  // sfix19_En16
  wire signed [19:0] BodyLSum4_add_cast_1;  // sfix20_En16
  wire signed [19:0] BodyLSum4_add_cast_2;  // sfix20_En16
  wire signed [19:0] BodyLSum4_add_temp;  // sfix20_En16
  wire signed [18:0] BodyLSum4_out1;  // sfix19_En16
  wire signed [18:0] BodyLSum5_add_cast;  // sfix19_En16
  wire signed [19:0] BodyLSum5_add_cast_1;  // sfix20_En16
  wire signed [19:0] BodyLSum5_add_cast_2;  // sfix20_En16
  wire signed [19:0] BodyLSum5_add_temp;  // sfix20_En16
  wire signed [18:0] BodyLSum5_out1;  // sfix19_En16
  wire signed [18:0] BodyLSum6_add_cast;  // sfix19_En16
  wire signed [19:0] BodyLSum6_add_cast_1;  // sfix20_En16
  wire signed [19:0] BodyLSum6_add_cast_2;  // sfix20_En16
  wire signed [19:0] BodyLSum6_add_temp;  // sfix20_En16
  wire signed [18:0] BodyLSum6_out1;  // sfix19_En16
  wire signed [18:0] BodyLSum7_add_cast;  // sfix19_En16
  wire signed [19:0] BodyLSum7_add_cast_1;  // sfix20_En16
  wire signed [19:0] BodyLSum7_add_cast_2;  // sfix20_En16
  wire signed [19:0] BodyLSum7_add_temp;  // sfix20_En16
  wire signed [18:0] BodyLSum7_out1;  // sfix19_En16
  wire signed [19:0] BodyLSum8_add_cast;  // sfix20_En16
  wire signed [19:0] BodyLSum8_add_cast_1;  // sfix20_En16
  wire signed [19:0] BodyLSum8_out1;  // sfix20_En16
  wire signed [21:0] BodyLSum9_add_cast;  // sfix22_En17
  wire signed [21:0] BodyLSum9_add_cast_1;  // sfix22_En17
  wire signed [21:0] BodyLSum9_out1;  // sfix22_En17
  wire signed [21:0] BodyLSum10_add_cast;  // sfix22_En16
  wire signed [21:0] BodyLSum10_add_cast_1;  // sfix22_En16
  wire signed [21:0] BodyLSum10_out1;  // sfix22_En16
  wire signed [22:0] BodyLSum11_add_cast;  // sfix23_En16
  wire signed [22:0] BodyLSum11_add_cast_1;  // sfix23_En16
  wire signed [22:0] BodyLSum11_out1;  // sfix23_En16
  wire signed [22:0] BodyLSum12_add_cast;  // sfix23_En16
  wire signed [23:0] BodyLSum12_add_cast_1;  // sfix24_En16
  wire signed [23:0] BodyLSum12_add_cast_2;  // sfix24_En16
  wire signed [23:0] BodyLSum12_add_temp;  // sfix24_En16
  wire signed [22:0] BodyLSum12_out1;  // sfix23_En16
  wire signed [23:0] BodyLSum13_add_cast;  // sfix24_En16
  wire signed [23:0] BodyLSum13_add_cast_1;  // sfix24_En16
  wire signed [23:0] BodyLSum13_out1;  // sfix24_En16
  wire signed [23:0] BodyLSum14_add_cast;  // sfix24_En16
  wire signed [24:0] BodyLSum14_add_cast_1;  // sfix25_En16
  wire signed [24:0] BodyLSum14_add_cast_2;  // sfix25_En16
  wire signed [24:0] BodyLSum14_add_temp;  // sfix25_En16
  wire signed [23:0] BodyLSum14_out1;  // sfix24_En16
  wire signed [24:0] BodyLSum15_add_cast;  // sfix25_En17
  wire signed [25:0] BodyLSum15_add_cast_1;  // sfix26_En17
  wire signed [25:0] BodyLSum15_add_cast_2;  // sfix26_En17
  wire signed [25:0] BodyLSum15_add_temp;  // sfix26_En17
  wire signed [24:0] BodyLSum15_out1;  // sfix25_En17
  wire signed [25:0] BodyLSum16_add_cast;  // sfix26_En18
  wire signed [26:0] BodyLSum16_add_cast_1;  // sfix27_En18
  wire signed [26:0] BodyLSum16_add_cast_2;  // sfix27_En18
  wire signed [26:0] BodyLSum16_add_temp;  // sfix27_En18
  wire signed [25:0] BodyLSum16_out1;  // sfix26_En18
  wire signed [25:0] BodyLSum17_add_cast;  // sfix26_En18
  wire signed [26:0] BodyLSum17_add_cast_1;  // sfix27_En18
  wire signed [26:0] BodyLSum17_add_cast_2;  // sfix27_En18
  wire signed [26:0] BodyLSum17_add_temp;  // sfix27_En18
  wire signed [25:0] BodyLSum17_out1;  // sfix26_En18
  wire signed [25:0] BodyLSum18_add_cast;  // sfix26_En18
  wire signed [26:0] BodyLSum18_add_cast_1;  // sfix27_En18
  wire signed [26:0] BodyLSum18_add_cast_2;  // sfix27_En18
  wire signed [26:0] BodyLSum18_add_temp;  // sfix27_En18
  wire signed [25:0] BodyLSum18_out1;  // sfix26_En18
  wire signed [25:0] BodyLSum19_add_cast;  // sfix26_En18
  wire signed [26:0] BodyLSum19_add_cast_1;  // sfix27_En18
  wire signed [26:0] BodyLSum19_add_cast_2;  // sfix27_En18
  wire signed [26:0] BodyLSum19_add_temp;  // sfix27_En18
  wire signed [25:0] BodyLSum19_out1;  // sfix26_En18
  wire signed [25:0] BodyLSum20_add_cast;  // sfix26_En18
  wire signed [26:0] BodyLSum20_add_cast_1;  // sfix27_En18
  wire signed [26:0] BodyLSum20_add_cast_2;  // sfix27_En18
  wire signed [26:0] BodyLSum20_add_temp;  // sfix27_En18
  wire signed [25:0] BodyLSum20_out1;  // sfix26_En18
  wire signed [25:0] BodyLSum21_add_cast;  // sfix26_En18
  wire signed [26:0] BodyLSum21_add_cast_1;  // sfix27_En18
  wire signed [26:0] BodyLSum21_add_cast_2;  // sfix27_En18
  wire signed [26:0] BodyLSum21_add_temp;  // sfix27_En18
  wire signed [25:0] BodyLSum21_out1;  // sfix26_En18
  wire signed [25:0] BodyLSum22_add_cast;  // sfix26_En18
  wire signed [26:0] BodyLSum22_add_cast_1;  // sfix27_En18
  wire signed [26:0] BodyLSum22_add_cast_2;  // sfix27_En18
  wire signed [26:0] BodyLSum22_add_temp;  // sfix27_En18
  wire signed [25:0] BodyLSum22_out1;  // sfix26_En18
  reg signed [15:0] BodyDelay23_out1;  // sfix16_En8
  wire signed [31:0] Product24_mul_temp;  // sfix32_En23
  wire signed [9:0] Product24_out1;  // sfix10_En9
  wire signed [15:0] BodyLSum23_add_cast;  // sfix16_En8
  wire signed [16:0] BodyLSum23_add_cast_1;  // sfix17_En8
  wire signed [15:0] BodyLSum23_add_cast_2;  // sfix16_En8
  wire signed [16:0] BodyLSum23_add_cast_3;  // sfix17_En8
  wire signed [16:0] BodyLSum23_add_temp;  // sfix17_En8
  wire signed [15:0] BodyLSum23_out1;  // sfix16_En8
  reg signed [15:0] BodyLSum23_out1_reg;
  
  //wire signed [15:0] BodyLSum23_out2_wire;  // sfix16_En8
  //reg signed [15:0] BodyLSum23_out2_reg;

  assign b23_1_out1 = 11'b00000001011;
 


//  assign enb = clk_enable;
always @(posedge clk or posedge reset)
	begin 
		if (reset == 1'b1) begin
		Input1_reg <= 16'b0;
		BodyLSum23_out1_reg<=16'b0;
end
	else begin
		if (clk_enable) begin
		Input1_reg <= Input1;
		BodyLSum23_out1_reg<=BodyLSum23_out1;
		end
	     end
	  end

////////////Проход сигнала через блоки задержки/////////////////////////////
  always @(posedge clk)
    begin : BodyDelay1_process
      if (reset == 1'b1) begin
        BodyDelay1_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay1_out1 <= Input1_reg;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay2_process
      if (reset == 1'b1) begin
        BodyDelay2_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay2_out1 <= BodyDelay1_out1;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay3_process
      if (reset == 1'b1) begin
        BodyDelay3_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay3_out1 <= BodyDelay2_out1;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay4_process
      if (reset == 1'b1) begin
        BodyDelay4_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay4_out1 <= BodyDelay3_out1;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay5_process
      if (reset == 1'b1) begin
        BodyDelay5_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay5_out1 <= BodyDelay4_out1;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay6_process
      if (reset == 1'b1) begin
        BodyDelay6_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay6_out1 <= BodyDelay5_out1;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay7_process
      if (reset == 1'b1) begin
        BodyDelay7_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay7_out1 <= BodyDelay6_out1;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay8_process
      if (reset == 1'b1) begin
        BodyDelay8_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay8_out1 <= BodyDelay7_out1;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay9_process
      if (reset == 1'b1) begin
        BodyDelay9_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay9_out1 <= BodyDelay8_out1;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay10_process
      if (reset == 1'b1) begin
        BodyDelay10_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay10_out1 <= BodyDelay9_out1;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay11_process
      if (reset == 1'b1) begin
        BodyDelay11_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay11_out1 <= BodyDelay10_out1;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay12_process
      if (reset == 1'b1) begin
        BodyDelay12_reg[0] <= 16'sb0000000000000000;
        BodyDelay12_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay12_reg[0] <= BodyDelay12_reg_next[0];
          BodyDelay12_reg[1] <= BodyDelay12_reg_next[1];
        end
      end
    end

  assign BodyDelay12_out1 = BodyDelay12_reg[1];
  assign BodyDelay12_reg_next[0] = BodyDelay11_out1;
  assign BodyDelay12_reg_next[1] = BodyDelay12_reg[0];



  always @(posedge clk)
    begin : BodyDelay13_process
      if (reset == 1'b1) begin
        BodyDelay13_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay13_out1 <= BodyDelay12_out1;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay14_process
      if (reset == 1'b1) begin
        BodyDelay14_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay14_out1 <= BodyDelay13_out1;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay15_process
      if (reset == 1'b1) begin
        BodyDelay15_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay15_out1 <= BodyDelay14_out1;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay16_process
      if (reset == 1'b1) begin
        BodyDelay16_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay16_out1 <= BodyDelay15_out1;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay17_process
      if (reset == 1'b1) begin
        BodyDelay17_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay17_out1 <= BodyDelay16_out1;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay18_process
      if (reset == 1'b1) begin
        BodyDelay18_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay18_out1 <= BodyDelay17_out1;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay19_process
      if (reset == 1'b1) begin
        BodyDelay19_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay19_out1 <= BodyDelay18_out1;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay20_process
      if (reset == 1'b1) begin
        BodyDelay20_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay20_out1 <= BodyDelay19_out1;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay21_process
      if (reset == 1'b1) begin
        BodyDelay21_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay21_out1 <= BodyDelay20_out1;
        end
      end
    end



  always @(posedge clk)
    begin : BodyDelay22_process
      if (reset == 1'b1) begin
        BodyDelay22_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay22_out1 <= BodyDelay21_out1;
        end
      end
    end

////////////////////Задаем константы//////////////////////

  assign b22_1_out1 = 20'sb11111110111101010001;



  assign b21_1_out1 = 19'b0000001011011010011;



  assign b20_1_out1 = 19'sb1111111001010100011;



  assign b19_1_out1 = 18'b000000110010111011;



  assign b18_1_out1 = 19'sb1111111100001000101;



  assign b17_1_out1 = 21'sb111111111000010110111;



  assign b16_1_out1 = 20'b00000110001111010011;



  assign b15_1_out1 = 20'sb11111000010101011101;



  assign b14_1_out1 = 19'b0010000000110101011;



  assign b13_1_out1 = 19'sb1101100101111110011;



  assign b12_1_out1 = 18'b010011010000001101;



  assign b11_1_out1 = 20'sb11101111111001010101;



  assign b10_1_out1 = 19'b0000111101010100011;



  assign b9_1_out1 = 22'sb1111110011100001011001;



  assign b8_1_out1 = 21'b000000001111010010011;



  assign b7_1_out1 = 18'b000000011110111011;



  assign b6_1_out1 = 21'sb111111100110100010011;



  assign b5_1_out1 = 20'b00000011010101110101;



  assign b4_1_out1 = 22'sb1111111010010010110011;



  assign b3_1_out1 = 20'b00000010000101011111;



  assign b2_1_out1 = 24'sb111111110100111111111101;


  assign b1_1_out1 = 22'b0000000010001001111111;



  assign b24_1_out1 = 16'sb1111111110111011;

////////////////////Реализация блоков умножителей///////////////////////

  assign Product2_mul_temp = b2_1_out1 * BodyDelay1_out1;
  assign Product2_out1 = Product2_mul_temp[31:14];



  assign Product23_cast = {1'b0, b23_1_out1};
  assign Product23_mul_temp = Product23_cast * BodyDelay22_out1;
  assign Product23_cast_1 = Product23_mul_temp[26:0];
  assign Product23_out1 = Product23_cast_1[19:2];



  assign Product22_mul_temp = b22_1_out1 * BodyDelay21_out1;
  assign Product22_out1 = Product22_mul_temp[27:12];



  assign Product21_cast = {1'b0, b21_1_out1};
  assign Product21_mul_temp = Product21_cast * BodyDelay20_out1;
  assign Product21_cast_1 = Product21_mul_temp[34:0];
  assign Product21_out1 = Product21_cast_1[28:8];



  assign Product20_mul_temp = b20_1_out1 * BodyDelay19_out1;
  assign Product20_out1 = Product20_mul_temp[27:9];



  assign Product19_cast = {1'b0, b19_1_out1};
  assign Product19_mul_temp = Product19_cast * BodyDelay18_out1;
  assign Product19_cast_1 = Product19_mul_temp[33:0];
  assign Product19_out1 = Product19_cast_1[27:8];



  assign Product18_mul_temp = b18_1_out1 * BodyDelay17_out1;
  assign Product18_out1 = Product18_mul_temp[26:7];



  assign Product17_mul_temp = b17_1_out1 * BodyDelay16_out1;
  assign Product17_out1 = Product17_mul_temp[28:10];



  assign Product16_cast = {1'b0, b16_1_out1};
  assign Product16_mul_temp = Product16_cast * BodyDelay15_out1;
  assign Product16_cast_1 = Product16_mul_temp[35:0];
  assign Product16_out1 = Product16_cast_1[30:10];



  assign Product15_mul_temp = b15_1_out1 * BodyDelay14_out1;
  assign Product15_out1 = Product15_mul_temp[30:10];



  assign Product14_cast = {1'b0, b14_1_out1};
  assign Product14_mul_temp = Product14_cast * BodyDelay13_out1;
  assign Product14_cast_1 = Product14_mul_temp[34:0];
  assign Product14_out1 = Product14_cast_1[31:10];



  assign Product13_mul_temp = b13_1_out1 * BodyDelay12_out1;
  assign Product13_out1 = Product13_mul_temp[31:9];



  assign Product12_cast = {1'b0, b12_1_out1};
  assign Product12_mul_temp = Product12_cast * BodyDelay11_out1;
  assign Product12_cast_1 = Product12_mul_temp[33:0];
  assign Product12_out1 = Product12_cast_1[31:9];



  assign Product11_mul_temp = b11_1_out1 * BodyDelay10_out1;
  assign Product11_out1 = Product11_mul_temp[31:11];



  assign Product10_cast = {1'b0, b10_1_out1};
  assign Product10_mul_temp = Product10_cast * BodyDelay9_out1;
  assign Product10_cast_1 = Product10_mul_temp[34:0];
  assign Product10_out1 = Product10_cast_1[30:10];



  assign Product9_mul_temp = b9_1_out1 * BodyDelay8_out1;
  assign Product9_out1 = Product9_mul_temp[31:12];



  assign Product8_cast = {1'b0, b8_1_out1};
  assign Product8_mul_temp = Product8_cast * BodyDelay7_out1;
  assign Product8_cast_1 = Product8_mul_temp[36:0];
  assign Product8_out1 = Product8_cast_1[29:12];



  assign Product7_cast = {1'b0, b7_1_out1};
  assign Product7_mul_temp = Product7_cast * BodyDelay6_out1;
  assign Product7_cast_1 = Product7_mul_temp[33:0];
  assign Product7_out1 = Product7_cast_1[26:9];



  assign Product6_mul_temp = b6_1_out1 * BodyDelay5_out1;
  assign Product6_out1 = Product6_mul_temp[29:11];



  assign Product5_cast = {1'b0, b5_1_out1};
  assign Product5_mul_temp = Product5_cast * BodyDelay4_out1;
  assign Product5_cast_1 = Product5_mul_temp[35:0];
  assign Product5_out1 = Product5_cast_1[29:11];



  assign Product4_mul_temp = b4_1_out1 * BodyDelay3_out1;
  assign Product4_out1 = Product4_mul_temp[30:11];



  assign Product3_cast = {1'b0, b3_1_out1};
  assign Product3_mul_temp = Product3_cast * BodyDelay2_out1;
  assign Product3_cast_1 = Product3_mul_temp[35:0];
  assign Product3_out1 = Product3_cast_1[28:11];



  assign Product1_cast = {1'b0, b1_1_out1};
  assign Product1_mul_temp = Input1_reg * Product1_cast;
  assign Product1_cast_1 = Product1_mul_temp[37:0];
  assign Product1_out1 = Product1_cast_1[30:13];


///////////Реализация блокой сумматоров/////////////////////////////


  assign BodyLSum1_add_cast = ((Product2_out1[17] == 1'b0) && (Product2_out1[16:1] == 16'b1111111111111111) ? 17'sb01111111111111111 :
              Product2_out1[17:1] + $signed({1'b0, Product2_out1[0]}));
  assign BodyLSum1_add_cast_1 = {BodyLSum1_add_cast[16], BodyLSum1_add_cast};
  assign BodyLSum1_add_cast_2 = ((Product1_out1[17] == 1'b0) && (Product1_out1[16:1] == 16'b1111111111111111) ? 17'sb01111111111111111 :
              Product1_out1[17:1] + $signed({1'b0, Product1_out1[0]}));
  assign BodyLSum1_add_cast_3 = {BodyLSum1_add_cast_2[16], BodyLSum1_add_cast_2};
  assign BodyLSum1_add_temp = BodyLSum1_add_cast_1 + BodyLSum1_add_cast_3;
  assign BodyLSum1_out1 = ((BodyLSum1_add_temp[17] == 1'b0) && (BodyLSum1_add_temp[16] != 1'b0) ? 17'sb01111111111111111 :
              ((BodyLSum1_add_temp[17] == 1'b1) && (BodyLSum1_add_temp[16] != 1'b1) ? 17'sb10000000000000000 :
              $signed(BodyLSum1_add_temp[16:0])));



  assign BodyLSum2_add_cast = ({Product3_out1[17], Product3_out1[17:1]}) + $signed({1'b0, Product3_out1[0]});
  assign BodyLSum2_add_cast_1 = {BodyLSum1_out1[16], BodyLSum1_out1};
  assign BodyLSum2_out1 = BodyLSum2_add_cast + BodyLSum2_add_cast_1;



  assign BodyLSum3_add_cast = ({Product4_out1[19], Product4_out1[19:2]}) + $signed({1'b0, Product4_out1[1]});
  assign BodyLSum3_add_cast_1 = {BodyLSum2_out1[17], BodyLSum2_out1};
  assign BodyLSum3_out1 = BodyLSum3_add_cast + BodyLSum3_add_cast_1;



  assign BodyLSum4_add_cast = ({Product5_out1[18], Product5_out1[18:1]}) + $signed({1'b0, Product5_out1[0]});
  assign BodyLSum4_add_cast_1 = {BodyLSum4_add_cast[18], BodyLSum4_add_cast};
  assign BodyLSum4_add_cast_2 = {BodyLSum3_out1[18], BodyLSum3_out1};
  assign BodyLSum4_add_temp = BodyLSum4_add_cast_1 + BodyLSum4_add_cast_2;
  assign BodyLSum4_out1 = ((BodyLSum4_add_temp[19] == 1'b0) && (BodyLSum4_add_temp[18] != 1'b0) ? 19'sb0111111111111111111 :
              ((BodyLSum4_add_temp[19] == 1'b1) && (BodyLSum4_add_temp[18] != 1'b1) ? 19'sb1000000000000000000 :
              $signed(BodyLSum4_add_temp[18:0])));



  assign BodyLSum5_add_cast = ({Product6_out1[18], Product6_out1[18:1]}) + $signed({1'b0, Product6_out1[0]});
  assign BodyLSum5_add_cast_1 = {BodyLSum5_add_cast[18], BodyLSum5_add_cast};
  assign BodyLSum5_add_cast_2 = {BodyLSum4_out1[18], BodyLSum4_out1};
  assign BodyLSum5_add_temp = BodyLSum5_add_cast_1 + BodyLSum5_add_cast_2;
  assign BodyLSum5_out1 = ((BodyLSum5_add_temp[19] == 1'b0) && (BodyLSum5_add_temp[18] != 1'b0) ? 19'sb0111111111111111111 :
              ((BodyLSum5_add_temp[19] == 1'b1) && (BodyLSum5_add_temp[18] != 1'b1) ? 19'sb1000000000000000000 :
              $signed(BodyLSum5_add_temp[18:0])));



  assign BodyLSum6_add_cast = ({{2{Product7_out1[17]}}, Product7_out1[17:1]}) + $signed({1'b0, Product7_out1[0]});
  assign BodyLSum6_add_cast_1 = {BodyLSum6_add_cast[18], BodyLSum6_add_cast};
  assign BodyLSum6_add_cast_2 = {BodyLSum5_out1[18], BodyLSum5_out1};
  assign BodyLSum6_add_temp = BodyLSum6_add_cast_1 + BodyLSum6_add_cast_2;
  assign BodyLSum6_out1 = ((BodyLSum6_add_temp[19] == 1'b0) && (BodyLSum6_add_temp[18] != 1'b0) ? 19'sb0111111111111111111 :
              ((BodyLSum6_add_temp[19] == 1'b1) && (BodyLSum6_add_temp[18] != 1'b1) ? 19'sb1000000000000000000 :
              $signed(BodyLSum6_add_temp[18:0])));



  assign BodyLSum7_add_cast = ({{2{Product8_out1[17]}}, Product8_out1[17:1]}) + $signed({1'b0, Product8_out1[0]});
  assign BodyLSum7_add_cast_1 = {BodyLSum7_add_cast[18], BodyLSum7_add_cast};
  assign BodyLSum7_add_cast_2 = {BodyLSum6_out1[18], BodyLSum6_out1};
  assign BodyLSum7_add_temp = BodyLSum7_add_cast_1 + BodyLSum7_add_cast_2;
  assign BodyLSum7_out1 = ((BodyLSum7_add_temp[19] == 1'b0) && (BodyLSum7_add_temp[18] != 1'b0) ? 19'sb0111111111111111111 :
              ((BodyLSum7_add_temp[19] == 1'b1) && (BodyLSum7_add_temp[18] != 1'b1) ? 19'sb1000000000000000000 :
              $signed(BodyLSum7_add_temp[18:0])));



  assign BodyLSum8_add_cast = ({Product9_out1[19], Product9_out1[19:1]}) + $signed({1'b0, Product9_out1[0]});
  assign BodyLSum8_add_cast_1 = {BodyLSum7_out1[18], BodyLSum7_out1};
  assign BodyLSum8_out1 = BodyLSum8_add_cast + BodyLSum8_add_cast_1;



  assign BodyLSum9_add_cast = {Product10_out1[20], Product10_out1};
  assign BodyLSum9_add_cast_1 = {BodyLSum8_out1[19], {BodyLSum8_out1, 1'b0}};
  assign BodyLSum9_out1 = BodyLSum9_add_cast + BodyLSum9_add_cast_1;



  assign BodyLSum10_add_cast = {Product11_out1[20], Product11_out1};
  assign BodyLSum10_add_cast_1 = ({BodyLSum9_out1[21], BodyLSum9_out1[21:1]}) + $signed({1'b0, BodyLSum9_out1[0]});
  assign BodyLSum10_out1 = BodyLSum10_add_cast + BodyLSum10_add_cast_1;



  assign BodyLSum11_add_cast = ({Product12_out1[22], Product12_out1[22:1]}) + $signed({1'b0, Product12_out1[0]});
  assign BodyLSum11_add_cast_1 = {BodyLSum10_out1[21], BodyLSum10_out1};
  assign BodyLSum11_out1 = BodyLSum11_add_cast + BodyLSum11_add_cast_1;



  assign BodyLSum12_add_cast = ({Product13_out1[22], Product13_out1[22:1]}) + $signed({1'b0, Product13_out1[0]});
  assign BodyLSum12_add_cast_1 = {BodyLSum12_add_cast[22], BodyLSum12_add_cast};
  assign BodyLSum12_add_cast_2 = {BodyLSum11_out1[22], BodyLSum11_out1};
  assign BodyLSum12_add_temp = BodyLSum12_add_cast_1 + BodyLSum12_add_cast_2;
  assign BodyLSum12_out1 = ((BodyLSum12_add_temp[23] == 1'b0) && (BodyLSum12_add_temp[22] != 1'b0) ? 23'sb01111111111111111111111 :
              ((BodyLSum12_add_temp[23] == 1'b1) && (BodyLSum12_add_temp[22] != 1'b1) ? 23'sb10000000000000000000000 :
              $signed(BodyLSum12_add_temp[22:0])));



  assign BodyLSum13_add_cast = ({{3{Product14_out1[21]}}, Product14_out1[21:1]}) + $signed({1'b0, Product14_out1[0]});
  assign BodyLSum13_add_cast_1 = {BodyLSum12_out1[22], BodyLSum12_out1};
  assign BodyLSum13_out1 = BodyLSum13_add_cast + BodyLSum13_add_cast_1;



  assign BodyLSum14_add_cast = ({{4{Product15_out1[20]}}, Product15_out1[20:1]}) + $signed({1'b0, Product15_out1[0]});
  assign BodyLSum14_add_cast_1 = {BodyLSum14_add_cast[23], BodyLSum14_add_cast};
  assign BodyLSum14_add_cast_2 = {BodyLSum13_out1[23], BodyLSum13_out1};
  assign BodyLSum14_add_temp = BodyLSum14_add_cast_1 + BodyLSum14_add_cast_2;
  assign BodyLSum14_out1 = ((BodyLSum14_add_temp[24] == 1'b0) && (BodyLSum14_add_temp[23] != 1'b0) ? 24'sb011111111111111111111111 :
              ((BodyLSum14_add_temp[24] == 1'b1) && (BodyLSum14_add_temp[23] != 1'b1) ? 24'sb100000000000000000000000 :
              $signed(BodyLSum14_add_temp[23:0])));



  assign BodyLSum15_add_cast = ({{5{Product16_out1[20]}}, Product16_out1[20:1]}) + $signed({1'b0, Product16_out1[0]});
  assign BodyLSum15_add_cast_1 = {BodyLSum15_add_cast[24], BodyLSum15_add_cast};
  assign BodyLSum15_add_cast_2 = {BodyLSum14_out1[23], {BodyLSum14_out1, 1'b0}};
  assign BodyLSum15_add_temp = BodyLSum15_add_cast_1 + BodyLSum15_add_cast_2;
  assign BodyLSum15_out1 = ((BodyLSum15_add_temp[25] == 1'b0) && (BodyLSum15_add_temp[24] != 1'b0) ? 25'sb0111111111111111111111111 :
              ((BodyLSum15_add_temp[25] == 1'b1) && (BodyLSum15_add_temp[24] != 1'b1) ? 25'sb1000000000000000000000000 :
              $signed(BodyLSum15_add_temp[24:0])));



  assign BodyLSum16_add_cast = {{7{Product17_out1[18]}}, Product17_out1};
  assign BodyLSum16_add_cast_1 = {BodyLSum16_add_cast[25], BodyLSum16_add_cast};
  assign BodyLSum16_add_cast_2 = {BodyLSum15_out1[24], {BodyLSum15_out1, 1'b0}};
  assign BodyLSum16_add_temp = BodyLSum16_add_cast_1 + BodyLSum16_add_cast_2;
  assign BodyLSum16_out1 = ((BodyLSum16_add_temp[26] == 1'b0) && (BodyLSum16_add_temp[25] != 1'b0) ? 26'sb01111111111111111111111111 :
              ((BodyLSum16_add_temp[26] == 1'b1) && (BodyLSum16_add_temp[25] != 1'b1) ? 26'sb10000000000000000000000000 :
              $signed(BodyLSum16_add_temp[25:0])));



  assign BodyLSum17_add_cast = ({{7{Product18_out1[19]}}, Product18_out1[19:1]}) + $signed({1'b0, Product18_out1[0]});
  assign BodyLSum17_add_cast_1 = {BodyLSum17_add_cast[25], BodyLSum17_add_cast};
  assign BodyLSum17_add_cast_2 = {BodyLSum16_out1[25], BodyLSum16_out1};
  assign BodyLSum17_add_temp = BodyLSum17_add_cast_1 + BodyLSum17_add_cast_2;
  assign BodyLSum17_out1 = ((BodyLSum17_add_temp[26] == 1'b0) && (BodyLSum17_add_temp[25] != 1'b0) ? 26'sb01111111111111111111111111 :
              ((BodyLSum17_add_temp[26] == 1'b1) && (BodyLSum17_add_temp[25] != 1'b1) ? 26'sb10000000000000000000000000 :
              $signed(BodyLSum17_add_temp[25:0])));



  assign BodyLSum18_add_cast = {{6{Product19_out1[19]}}, Product19_out1};
  assign BodyLSum18_add_cast_1 = {BodyLSum18_add_cast[25], BodyLSum18_add_cast};
  assign BodyLSum18_add_cast_2 = {BodyLSum17_out1[25], BodyLSum17_out1};
  assign BodyLSum18_add_temp = BodyLSum18_add_cast_1 + BodyLSum18_add_cast_2;
  assign BodyLSum18_out1 = ((BodyLSum18_add_temp[26] == 1'b0) && (BodyLSum18_add_temp[25] != 1'b0) ? 26'sb01111111111111111111111111 :
              ((BodyLSum18_add_temp[26] == 1'b1) && (BodyLSum18_add_temp[25] != 1'b1) ? 26'sb10000000000000000000000000 :
              $signed(BodyLSum18_add_temp[25:0])));



  assign BodyLSum19_add_cast = {{6{Product20_out1[18]}}, {Product20_out1, 1'b0}};
  assign BodyLSum19_add_cast_1 = {BodyLSum19_add_cast[25], BodyLSum19_add_cast};
  assign BodyLSum19_add_cast_2 = {BodyLSum18_out1[25], BodyLSum18_out1};
  assign BodyLSum19_add_temp = BodyLSum19_add_cast_1 + BodyLSum19_add_cast_2;
  assign BodyLSum19_out1 = ((BodyLSum19_add_temp[26] == 1'b0) && (BodyLSum19_add_temp[25] != 1'b0) ? 26'sb01111111111111111111111111 :
              ((BodyLSum19_add_temp[26] == 1'b1) && (BodyLSum19_add_temp[25] != 1'b1) ? 26'sb10000000000000000000000000 :
              $signed(BodyLSum19_add_temp[25:0])));



  assign BodyLSum20_add_cast = ({{6{Product21_out1[20]}}, Product21_out1[20:1]}) + $signed({1'b0, Product21_out1[0]});
  assign BodyLSum20_add_cast_1 = {BodyLSum20_add_cast[25], BodyLSum20_add_cast};
  assign BodyLSum20_add_cast_2 = {BodyLSum19_out1[25], BodyLSum19_out1};
  assign BodyLSum20_add_temp = BodyLSum20_add_cast_1 + BodyLSum20_add_cast_2;
  assign BodyLSum20_out1 = ((BodyLSum20_add_temp[26] == 1'b0) && (BodyLSum20_add_temp[25] != 1'b0) ? 26'sb01111111111111111111111111 :
              ((BodyLSum20_add_temp[26] == 1'b1) && (BodyLSum20_add_temp[25] != 1'b1) ? 26'sb10000000000000000000000000 :
              $signed(BodyLSum20_add_temp[25:0])));



  assign BodyLSum21_add_cast = {{7{Product22_out1[15]}}, {Product22_out1, 3'b000}};
  assign BodyLSum21_add_cast_1 = {BodyLSum21_add_cast[25], BodyLSum21_add_cast};
  assign BodyLSum21_add_cast_2 = {BodyLSum20_out1[25], BodyLSum20_out1};
  assign BodyLSum21_add_temp = BodyLSum21_add_cast_1 + BodyLSum21_add_cast_2;
  assign BodyLSum21_out1 = ((BodyLSum21_add_temp[26] == 1'b0) && (BodyLSum21_add_temp[25] != 1'b0) ? 26'sb01111111111111111111111111 :
              ((BodyLSum21_add_temp[26] == 1'b1) && (BodyLSum21_add_temp[25] != 1'b1) ? 26'sb10000000000000000000000000 :
              $signed(BodyLSum21_add_temp[25:0])));



  assign BodyLSum22_add_cast = {{7{Product23_out1[17]}}, {Product23_out1, 1'b0}};
  assign BodyLSum22_add_cast_1 = {BodyLSum22_add_cast[25], BodyLSum22_add_cast};
  assign BodyLSum22_add_cast_2 = {BodyLSum21_out1[25], BodyLSum21_out1};
  assign BodyLSum22_add_temp = BodyLSum22_add_cast_1 + BodyLSum22_add_cast_2;
  assign BodyLSum22_out1 = ((BodyLSum22_add_temp[26] == 1'b0) && (BodyLSum22_add_temp[25] != 1'b0) ? 26'sb01111111111111111111111111 :
              ((BodyLSum22_add_temp[26] == 1'b1) && (BodyLSum22_add_temp[25] != 1'b1) ? 26'sb10000000000000000000000000 :
              $signed(BodyLSum22_add_temp[25:0])));



  always @(posedge clk)
    begin : BodyDelay23_process
      if (reset == 1'b1) begin
        BodyDelay23_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (clk_enable) begin
          BodyDelay23_out1 <= BodyDelay22_out1;
        end
      end
    end



  assign Product24_mul_temp = b24_1_out1 * BodyDelay23_out1;
  assign Product24_out1 = Product24_mul_temp[23:14];



  assign BodyLSum23_add_cast = ((BodyLSum22_out1[25] == 1'b0) && (BodyLSum22_out1[24:10] == 15'b111111111111111) ? 16'sb0111111111111111 :
              BodyLSum22_out1[25:10] + $signed({1'b0, BodyLSum22_out1[9]}));
  assign BodyLSum23_add_cast_1 = {BodyLSum23_add_cast[15], BodyLSum23_add_cast};
  assign BodyLSum23_add_cast_2 = ({{7{Product24_out1[9]}}, Product24_out1[9:1]}) + $signed({1'b0, Product24_out1[0]});
  assign BodyLSum23_add_cast_3 = {BodyLSum23_add_cast_2[15], BodyLSum23_add_cast_2};
  assign BodyLSum23_add_temp = BodyLSum23_add_cast_1 + BodyLSum23_add_cast_3;
  assign BodyLSum23_out1 = ((BodyLSum23_add_temp[16] == 1'b0) && (BodyLSum23_add_temp[15] != 1'b0) ? 16'sb0111111111111111 :
              ((BodyLSum23_add_temp[16] == 1'b1) && (BodyLSum23_add_temp[15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(BodyLSum23_add_temp[15:0])));

always@(posedge clk)
BodyLSum23_out1_reg <= BodyLSum23_out1;

    
assign Output1 = BodyLSum23_out1_reg;


endmodule  // Filter_test_24
